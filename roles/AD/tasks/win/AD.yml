# - name: Uninstall feature if present
#   win_wipe_AD:
#      localAdminPassword: "{{ ansible_password }}"
#   register: out
# - name: Wait for server to be up after uninstall
#   wait_for_connection:
#     delay: 120
#     timeout: 180
#   when: out.changed
# - name: install ad
#   win_feature:
#     name: AD-Domain-Services
#     include_management_tools: yes
#     include_sub_features: yes
#     state: present
#   register: result
# - name: Create new domain in a new forest on the target host
#   win_domain:
#     dns_domain_name: "{{ domain.name }}"
#     safe_mode_password: "{{ domain.recoveryPassword if domain.recoveryPassword|d(False) else ansible_password }}"
#   register: ad0
# - name: Create new domain in a new forest with specific parameters
#   win_domain:
#     create_dns_delegation: no
#     database_path: C:\Windows\NTDS
#     dns_domain_name: "{{ domain.name }}"
#     domain_mode: Win2012R2
#     domain_netbios_name: ANSIBLE
#     forest_mode: Win2012R2
#     safe_mode_password: password123!
#     sysvol_path: C:\Windows\SYSVOL
#   register: ad1
# - name: reboot server
#   win_reboot:
#     msg: "Installing AD. Rebooting..."
#   when: ad0.changed or ad1.changed
# - name: Wait for server to be up after install
#   wait_for_connection:
#     delay: 300
#     timeout: 500
#   when: ad0.changed or ad1.changed

- name: Prepare Organizational Units variable
  block:
    - set_fact:
        firewall_rules_to_set: "{{ OUS }}"
      when: OUS[0] is mapping
    - set_fact:
        OUS_to_set: "{{ OUS_to_set|d([]) + lookup('vars', alias)|d([]) }}"
      loop: "{{ OUS  }}"
      loop_control:
        loop_var: alias
      when: OUS[0] is string
  when: OUS|d([])|length>0


################# Try to get OU parent path by name
- name: Create OU
  include: OU.yml
  loop: "{{ OUS_to_set }}"
  loop_control:
    loop_var: OU
  when: OUS_to_set|d(False)