---
# file: roles/common/tasks/main.yml

- name: Set temporary ansible host variable
  set_fact:
    ansible_host_final: "{{ ansible_host }}"
    ansible_host: "{{ ansible_host_tmp }}"
  when: not (interface.ip|d(False))
- name: Set Facts
  setup:

- name: "Set windows IP interface {{ interface.name|d('Ethernet0') }}"
  win_static_IP:
    interface: "{{ interface.name|d('Ethernet0') }}"
    ip: "{{ interface.ip|d(ansible_host_final) }}"
    gateway: "{{ interface.gateway|d(omit) }}"
    subNet: "{{ interface.subnet|d(24) }}"
    currentInterface: "{{ not (interface.ip|d(False)) }}"
  when: ansible_facts['os_family'] == 'Windows'

# - name: set pfsense ip
#   block:
#     - name: Set pfsense ip
#       pfsensible.core.interface:
#         interface: "{{ interface.name }}"
#         ipv4_address: "{{ interface.ip }}"
#         ipv4_gateway: "{{ interface.gateway|d(None) }}"
#         ipv4_prefixlen: "{{ interface.subnet|d(24) }}"
#         ipv4_type: static
#         descr: "{{ interface.zone|d('pfsense_setupIP_{{ interface.name }}') }}"
#         enable: true
#       when: not ansible_host_final|d(False)
#     - name: Failed same interface not permitted for pfsense static IP
#       fail:
#         msg: Failed same interface not permitted for pfsense static IP
#       when: ansible_host_final|d(False)
#   when: ansible_facts['os_family'] == 'FreeBSD' and 'pfSense' in ansible_facts['kernel_version']



# - name: Set IP for linux
#   block:
#     - name: non RedHat distro
#       block:
#         # - name: install needed network manager libs
#         #   package:
#         #     name:
#         #       - NetworkManager-libnm
#         #       - nm-connection-editor
#         #     state: present
#         # - name: install needed network manager libs
#         #   apt:
#         #     name: python-gi
#         #     state: present
#         - name: install needed network manager libs
#           package:
#             name:
#               - python3-dbus
#               - network-manager
#               - libnm-glib-dev
#             state: present
#         - name: Set IP for linux
#           nmcli:
#             type: ethernet
#             conn_name: "{{ interface.name|d('ens33') }}"
#             ifname: "{{ interface.name|d('ens33') }}"
#             ip4: "{{ interface.ip|d(ansible_host_final) }}"
#             gw4: "{{ interface.gateway|d(None) }}"
#             state: present
#       when: ansible_facts['os_family'] != 'RedHat'
#     - name: Set IP
#       include_role:
#         name: linux-system-roles.network
#       vars:
#         network_connections:
#           - name: "{{ interface.name|d('ens33') }}"
#             interface_name: "{{ interface.name|d('ens33') }}"
#             # state: up
#             type: "ethernet"
#             autoconnect: yes
#             ip:
#               dhcp4: no
#               gateway4: "{{ interface.gateway|d('0.0.0.0') }}"
#               address:
#                 - "{{ interface.ip|d(ansible_host_final) }}/{{ interface.subnet|d(24) }}"
#       when: ansible_facts['os_family'] == 'RedHat' or ansible_facts['os_family'] == 'CentOS'
#     # - name: Restart network
#     #   shell: systemctl restart network
#     - name: restart systemd-networkd
#       systemd:
#         name: network
#         state: restarted
#       async: 30
#       poll: 0
#     - name: Wait after service restart
#       pause:
#         seconds: 10
#       when: not interface.ip|d(False)
#   become: yes
#   become_user: root
#   when: ansible_facts['os_family'] != 'Windows' and (ansible_facts['os_family'] != 'FreeBSD' or 'pfSense' not in ansible_facts['kernel_version'])



- name: Set unknow system IP
  fail:
    msg: "Can't set the ip of {{ inventory_hostname }} os family {{ ansible_facts['os_family'] }}"
  when: ansible_facts['os_family'] != 'Windows' and ansible_facts['os_family'] == 'FreeBSD' and 'pfSense' not in ansible_facts['kernel_version']



- name: Set back ansible host variable
  block:
    - name: Set back ansible host variable
      set_fact:
        ansible_host: "{{ ansible_host_final }}"
    # - name: Verify host interface post changement
    #   ping:
    #   when: ansible_facts['os_family'] != 'Windows'
    - name: Wait for the hosts network interface to come back up
      local_action:
        module: wait_for
        host: "{{ ansible_host }}"
        port: "{{ ansible_winrm_port|d(ansible_port) }}"
        delay: 10
        state: started
      register: wait_result
      when: ansible_facts['os_family'] == 'Windows'
  when: not interface.ip|d(False)

